# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
- name: module
  type: string
  default: 'all' # Default to 'all' to run all modules if no specific module is provided
  
trigger:
- none

variables:
  base-output-directory: $(Agent.BuildDirectory)
pool:
  name: rabo-ranz-pool
  demands:
   - agent.name -equals windowsmachine

steps:
- checkout: self


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      #$directory = "$(System.DefaultWorkingDirectory)"
      $directories = Get-ChildItem -Directory -Recurse | Select-Object -ExpandProperty FullName
      ForEach ($Item in $directories)    
             Write-Host "No of folders found in the directory $Item"
          
  displayName: 'Run Python script'
            # Define the directory to search for .b files
            #$directory = "$(System.DefaultWorkingDirectory)"
      
            # List all .b files recursively
            #$bFiles = Get-ChildItem -Path $directory -Recurse -Filter "*.b" -File
      
            # If no .b files found, exit with a message
            #if ($bFiles.Count -eq 0) {
             #   Write-Host "No .b files found in the directory $directory"
              #  exit 1
            #}
      
            # Display the list of .b files to the user
            #Write-Host "List of .b files found:"
            #for ($i = 0; $i -lt $bFiles.Count; $i++) {
             #   Write-Host "$($i+1): $($bFiles[$i].FullName)"
            #}
      
            # Prompt the user to select a .b file
            #$selection = Read-Host "Enter the number of the .b file to run the JAR command on"
      
            # Validate the user input
            #if ($selection -lt 1 -or $selection -gt $bFiles.Count) {
             #   Write-Host "Invalid selection. Please enter a number between 1 and $($bFiles.Count)"
              #  exit 1
            #}
      
            # Get the selected .b file
            #$selectedFile = $bFiles[$selection - 1]
      
            # Pass the selected file path as an output variable
            #Write-Output "##vso[task.setvariable variable=SelectedBFile;isOutput=true]$selectedFile"





#- powershell: |
    # Function to recursively find and update .b files
    #function UpdateBFiles($path) {
        # List all files in the current directory
        #$files = Get-ChildItem -Path $path -File -Filter "*.b"

        # Loop through each file
       # foreach ($file in $files) {
          #  Write-Host "Updating $($file.FullName)"
            # Append "new version" to the file
          #  Add-Content -Path $file.FullName -Value "new version"
       # }

        # List all directories
        #$directories = Get-ChildItem -Path $path -Directory

        # Recursively call the function for subdirectories
        #foreach ($directory in $directories) {
         #   UpdateBFiles $directory.FullName
       # }
  #  }

    # Call the function for the current directory
   # UpdateBFiles (Get-Location).Path
